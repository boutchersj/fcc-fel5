{"version":3,"sources":["Break.js","Timer.js","Sesh.js","Pomodoro.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Break","props","react_default","a","createElement","className","id","class","onClick","breakIncrement","breakTime","breakDecrement","Timer","minutes","seconds","Sesh","seshIncrement","seshTime","seshDecrement","Pomodoro","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","src","logo","alt","src_Break","src_Timer","src_Sesh","React","Component","App","handleBreakIncrement","bind","assertThisInitialized","handleBreakDecrement","handleSeshIncrement","handleSeshDecrement","setState","prevState","src_Pomodoro","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.b202e1d4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Break(props) {\r\n    return (\r\n    <div className=\"flex-third\">\r\n\r\n        <h3 id=\"break-label\">Break Length</h3>\r\n        <p class=\"incDec\" id=\"break-increment\" onClick={props.breakIncrement}>+</p>\r\n        <p id=\"break-length\">{props.breakTime}</p>\r\n        <p class=\"incDec\" id=\"break-decrement\" onClick={props.breakDecrement}>-</p>\r\n        \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Break","import React from 'react'\r\n\r\nfunction Timer(props){\r\n\r\n    return (\r\n        <div className=\"flex-third\" id=\"timer\">\r\n\r\n            <h3 id=\"timer-label\">Session</h3>\r\n\r\n            <div id=\"time-left\">\r\n            {props.minutes}:{props.seconds}\r\n            </div>\r\n\r\n            <div className=\"timer-buttons\">\r\n            <p id=\"start_stop\">Start/Stop</p>\r\n            <p id=\"reset\">Reset</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer","import React from 'react'\r\n\r\nfunction Sesh(props) {\r\n\r\n    return (\r\n        <div className=\"flex-third\">\r\n\r\n            <h3 id=\"session-label\">Session Length</h3>\r\n            <p class=\"incDec\" id=\"session-increment\" onClick={props.seshIncrement}>+</p>\r\n            <p id=\"session-length\">{props.seshTime}</p>\r\n            <p class=\"incDec\" id=\"session-decrement\" onClick={props.seshDecrement}>-</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sesh","import React from 'react'\r\nimport Break from './Break'\r\nimport Timer from './Timer'\r\nimport Sesh from './Sesh'\r\n\r\nclass Pomodoro extends React.Component {\r\n    \r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            minutes: '25',\r\n            seconds: '00'\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"whole-app\">\r\n\r\n                <header id=\"Header\">\r\n                    <img src={this.props.logo} className=\"App-logo\" alt=\"logo\" />\r\n                    <h1>Steven's Pomodoro Clock</h1>\r\n                </header>\r\n\r\n                <main id=\"Main\">\r\n\r\n                    <Break\r\n                        breakIncrement = {this.props.breakIncrement}\r\n                        breakTime = {this.props.breakTime}\r\n                        breakDecrement = {this.props.breakDecrement}\r\n                    />\r\n\r\n                    <Timer\r\n                        minutes = {this.state.minutes}\r\n                        seconds = {this.state.seconds}\r\n                    />\r\n\r\n                    <Sesh\r\n                        seshIncrement = {this.props.seshIncrement}\r\n                        seshTime = {this.props.seshTime}\r\n                        seshDecrement = {this.props.seshDecrement}\r\n                    />\r\n\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pomodoro","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Pomodoro from './Pomodoro'\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      \"breakTime\": 5,\n      \"seshTime\": 25\n    }\n    this.handleBreakIncrement = this.handleBreakIncrement.bind(this)\n    this.handleBreakDecrement = this.handleBreakDecrement.bind(this)\n    this.handleSeshIncrement = this.handleSeshIncrement.bind(this)\n    this.handleSeshDecrement = this.handleSeshDecrement.bind(this)\n  }\n  handleBreakIncrement() {\n    this.setState(prevState => {\n      return {breakTime: prevState.breakTime + 1}\n    })\n  }\n  handleBreakDecrement() {\n    if (this.state.breakTime === 0) {\n      this.setState({breakTime: 0})\n    }\n    else {\n      this.setState(prevState => {\n        return {breakTime: prevState.breakTime - 1}\n      })\n    }\n  }\n  handleSeshIncrement() {\n    this.setState(prevState => {\n      return {seshTime: prevState.seshTime + 1}\n    })\n  }\n  handleSeshDecrement() {\n    if (this.state.seshTime === 0){\n      this.setState({seshTime: 0})\n    }\n    else {\n      this.setState(prevState => {\n        return {seshTime: prevState.seshTime - 1}\n      })\n    }\n  }\n  render() {\n    return (\n      <Pomodoro\n        logo = {logo}\n        breakIncrement = {this.handleBreakIncrement}\n        breakTime = {this.state.breakTime}\n        breakDecrement = {this.handleBreakDecrement}\n        seshIncrement = {this.handleSeshIncrement}\n        seshTime = {this.state.seshTime}\n        seshDecrement = {this.handleSeshDecrement}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}